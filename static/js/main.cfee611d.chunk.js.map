{"version":3,"sources":["Component/loader.js","Component/ListaPlanet.js","App.js","serviceWorker.js","index.js"],"names":["Loader","react_default","a","createElement","className","Component","ListaPlanet","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","estaCarregando","listaPlanet","listaFilmes","nextPage","prevPage","nextPageRequest","bind","assertThisInitialized","previousPageRequest","scrollToTop","_this2","setState","Axios","get","then","res","persons","data","results","next","previous","console","log","films","_this3","_this4","window","pageYOffset","scroll","buscaPlanet","listaFilms","loader","Component_loader","map","planet","i","key","name","population","climate","terrain","film","j","url","title","type","onClick","App","src_Component_ListaPlanet","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cfee611d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport './Loader.css'\r\n\r\n\r\nclass Loader extends Component {\r\n    render(){\r\n        return(\r\n            <div className=\"overlay\">\r\n                <div className=\"animate\">Loading</div>\r\n            </div> \r\n        )\r\n    }\r\n}\r\n\r\nexport default Loader","import React, {Component} from 'react'\r\n\r\nimport './ListaPlanet.css'\r\nimport Axios from 'axios';\r\nimport Loader from './loader';\r\n\r\n\r\n\r\nclass ListaPlanet extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            estaCarregando: false,\r\n            listaPlanet: '',\r\n            listaFilmes: '',\r\n            nextPage: null,\r\n            prevPage: null\r\n        }\r\n\r\n        this.nextPageRequest = this.nextPageRequest.bind(this)\r\n        this.previousPageRequest = this.previousPageRequest.bind(this)\r\n        this.scrollToTop = this.scrollToTop.bind(this)\r\n    }\r\n\r\n    \r\n\r\n    buscaPlanet() {\r\n        this.setState({\r\n            estaCarregando: true\r\n        })\r\n\r\n        Axios.get('https://swapi.co/api/planets/')\r\n          .then(res => {\r\n            const persons = res.data;\r\n            this.setState({\r\n                listaPlanet: persons.results,\r\n                estaCarregando: false,\r\n                nextPage: res.data.next,\r\n                prevPage: res.data.previous\r\n            })\r\n            console.log(res, \"diogo\")\r\n        })\r\n\r\n        Axios.get('https://swapi.co/api/films/')\r\n          .then(res => {\r\n            const films = res.data;\r\n            this.setState({\r\n                listaFilmes: films.results,\r\n                estaCarregando: false\r\n            })\r\n        })\r\n    }\r\n\r\n    previousPageRequest(){\r\n        this.setState({\r\n            estaCarregando: true\r\n        })\r\n\r\n        Axios.get(this.state.prevPage)\r\n          .then(res => {\r\n            const persons = res.data;\r\n            this.setState({\r\n                listaPlanet: persons.results,\r\n                estaCarregando: false,\r\n                nextPage: res.data.next,\r\n                prevPage: res.data.previous\r\n            })\r\n        })\r\n    }\r\n\r\n    nextPageRequest(){\r\n        this.setState({\r\n            estaCarregando: true\r\n        })\r\n\r\n        Axios.get(this.state.nextPage)\r\n          .then(res => {\r\n            const persons = res.data;\r\n            this.setState({\r\n                listaPlanet: persons.results,\r\n                estaCarregando: false,\r\n                nextPage: res.data.next,\r\n                prevPage: res.data.previous\r\n            })\r\n        })\r\n    }\r\n\r\n    scrollToTop() {\r\n        if (window.pageYOffset > 0) {            \r\n            console.log(\"subiu\")\r\n            window.scroll(0, 0);\r\n        }\r\n      }\r\n\r\n    componentDidMount(){\r\n        this.buscaPlanet()\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        this.scrollToTop()\r\n    }\r\n    \r\n    render(){\r\n        const listaPlanet = this.state.listaPlanet || []\r\n        const listaFilms = this.state.listaFilmes || [] \r\n        const loader = this.state.estaCarregando || false\r\n        const next = this.state.nextPage || null\r\n        const previous = this.state.prevPage || null\r\n        \r\n        return(\r\n            <div>\r\n                {loader && <Loader/> }\r\n                {listaPlanet.map((planet,i) => \r\n                    <div className=\"row\" key={i}>                        \r\n                        <div className=\"col s12 m6\">\r\n                        <div className=\"card\">\r\n                            <div className=\"card-content\">\r\n                                <h2 className=\"card-title\">{planet.name}</h2>\r\n                                <p><strong>population: </strong>{planet.population}</p>\r\n                                <p><strong>climate: </strong>{planet.climate}</p>\r\n                                <p><strong>terrain: </strong>{planet.terrain}</p>\r\n                                <strong>featured in films:</strong>\r\n                                <ul>\r\n                                    {                                        \r\n                                        planet.films.map((planet, i) =>\r\n                                            <li key={i}> \r\n                                                {\r\n                                                    listaFilms.map((film, j) =>\r\n                                                        planet === film.url && <span key={j} >{film.title}</span>\r\n                                                    )\r\n                                                }  \r\n                                            </li>                                        \r\n                                        )\r\n                                    }\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                <div className=\"card-action\">\r\n                    {\r\n                        previous && <button type=\"button\" className=\"cinza\" onClick={this.previousPageRequest}>previous</button>\r\n                    }\r\n                    {\r\n                        next && <button type=\"button\" className=\"blue\" onClick={this.nextPageRequest}>Next</button>\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListaPlanet","import React, {Component} from 'react';\nimport './App.css';\nimport ListaPlanet from './Component/ListaPlanet';\n\n\nclass App extends Component{\n\n  constructor(props){\n    super()\n    this.state={\n      title: 'simple'\n    }\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        \n        <ListaPlanet />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}